// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Runtime.InteropServices;
    using System.Text;
    using Coherence;
    using Coherence.Brisk;
    using Coherence.ProtocolDef;
    using Coherence.Connection;
    using Coherence.Entities;
    using System.Collections.Generic;
    using Coherence.SimulationFrame;
    using Coherence.Core;

    public class DataInteropHandler : IDataInteropHandler
    {
        public unsafe ICoherenceComponentData GetComponent(UInt32 type, IntPtr data, Int32 dataSize, InteropAbsoluteSimulationFrame* simFrames, Int32 simFramesCount)
        {
            switch(type)
            {
                case 0: return WorldPosition.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 1: return WorldOrientation.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 2: return LocalUserComponent.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 3: return WorldPositionQuery.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 4: return ArchetypeComponent.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 5: return Persistence.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 6: return ConnectedEntity.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 7: return UniqueID.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 8: return Connection.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 9: return ConnectionScene.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 10: return Global.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 11: return GlobalQuery.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 12: return Tag.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 13: return TagQuery.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 14: return PreserveChildren.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 15: return Scene.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 16: return AssetId.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 17: return GenericScale.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 18: return _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 19: return _424d353102968b249b9d7b0f844f8d7d_549442185799218217.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 20: return _7128f27b1ed1baf489c8389ed5d6fc89_6470917955799697127.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 21: return _914d344279c379f419cf479a1753d20a_2829627674445409302.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 22: return _bb0f0a9322c5911438bb794513b1730c_7055187111608814719.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 23: return _cc21e0b721af6554cb6d76410a471081_1249811188870620346.FromInterop(data, dataSize, simFrames, simFramesCount);
                case 24: return _ea0ce77a37858c0439454347131e0952_7211456737231016444.FromInterop(data, dataSize, simFrames, simFramesCount);
            }

            throw new ArgumentException($"Unkown component type {type}", nameof(type));
        }

        public unsafe void UpdateComponent(INativeCoreComponentUpdater updater, InteropEntity entity, ICoherenceComponentData component)
        {
            var componentType = component.GetComponentType();
            var frames = component.GetSimulationFrames();

            switch (componentType)
            {
                case 0:
                {
                    var orig = (WorldPosition)component;
                    var val = new WorldPosition.Interop();

                    val.value = orig.value;

                    updater.UpdateComponent(entity, componentType, val, 12, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 1:
                {
                    var orig = (WorldOrientation)component;
                    var val = new WorldOrientation.Interop();

                    val.value = orig.value;

                    updater.UpdateComponent(entity, componentType, val, 16, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 2:
                {
                    var orig = (LocalUserComponent)component;
                    var val = new LocalUserComponent.Interop();

                    val.localIndex = orig.localIndex;

                    updater.UpdateComponent(entity, componentType, val, 4, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 3:
                {
                    var orig = (WorldPositionQuery)component;
                    var val = new WorldPositionQuery.Interop();

                    val.position = orig.position;
                    val.radius = orig.radius;

                    updater.UpdateComponent(entity, componentType, val, 16, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 4:
                {
                    var orig = (ArchetypeComponent)component;
                    var val = new ArchetypeComponent.Interop();

                    val.index = orig.index;

                    updater.UpdateComponent(entity, componentType, val, 4, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 5:
                {
                    var orig = (Persistence)component;
                    var val = new Persistence.Interop();


                    updater.UpdateComponent(entity, componentType, val, 0, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 6:
                {
                    var orig = (ConnectedEntity)component;
                    var val = new ConnectedEntity.Interop();

                    val.value = orig.value;
                    val.pos = orig.pos;
                    val.rot = orig.rot;
                    val.scale = orig.scale;

                    updater.UpdateComponent(entity, componentType, val, 44, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 7:
                {
                    var orig = (UniqueID)component;
                    var val = new UniqueID.Interop();

                    var pinneduuid = orig.uuid != null ? Encoding.UTF8.GetBytes(orig.uuid) : null; fixed (void* pinnedPtruuid = pinneduuid) { val.uuid = new ByteArray { Data = pinnedPtruuid, Length =  pinneduuid?.Length ?? 0 };

                    updater.UpdateComponent(entity, componentType, val, 16, component.FieldsMask, component.StoppedMask, frames);

}                    return;
                }
                case 8:
                {
                    var orig = (Connection)component;
                    var val = new Connection.Interop();

                    val.id = orig.id;
                    val.type = orig.type;

                    updater.UpdateComponent(entity, componentType, val, 8, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 9:
                {
                    var orig = (ConnectionScene)component;
                    var val = new ConnectionScene.Interop();

                    val.value = orig.value;

                    updater.UpdateComponent(entity, componentType, val, 4, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 10:
                {
                    var orig = (Global)component;
                    var val = new Global.Interop();


                    updater.UpdateComponent(entity, componentType, val, 0, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 11:
                {
                    var orig = (GlobalQuery)component;
                    var val = new GlobalQuery.Interop();


                    updater.UpdateComponent(entity, componentType, val, 0, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 12:
                {
                    var orig = (Tag)component;
                    var val = new Tag.Interop();

                    var pinnedtag = orig.tag != null ? Encoding.UTF8.GetBytes(orig.tag) : null; fixed (void* pinnedPtrtag = pinnedtag) { val.tag = new ByteArray { Data = pinnedPtrtag, Length =  pinnedtag?.Length ?? 0 };

                    updater.UpdateComponent(entity, componentType, val, 16, component.FieldsMask, component.StoppedMask, frames);

}                    return;
                }
                case 13:
                {
                    var orig = (TagQuery)component;
                    var val = new TagQuery.Interop();

                    var pinnedtag = orig.tag != null ? Encoding.UTF8.GetBytes(orig.tag) : null; fixed (void* pinnedPtrtag = pinnedtag) { val.tag = new ByteArray { Data = pinnedPtrtag, Length =  pinnedtag?.Length ?? 0 };

                    updater.UpdateComponent(entity, componentType, val, 16, component.FieldsMask, component.StoppedMask, frames);

}                    return;
                }
                case 14:
                {
                    var orig = (PreserveChildren)component;
                    var val = new PreserveChildren.Interop();


                    updater.UpdateComponent(entity, componentType, val, 0, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 15:
                {
                    var orig = (Scene)component;
                    var val = new Scene.Interop();

                    val.value = orig.value;

                    updater.UpdateComponent(entity, componentType, val, 4, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 16:
                {
                    var orig = (AssetId)component;
                    var val = new AssetId.Interop();

                    val.value = orig.value;
                    val.isFromGroup = orig.isFromGroup ? (System.Byte)1 : (System.Byte)0;

                    updater.UpdateComponent(entity, componentType, val, 5, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 17:
                {
                    var orig = (GenericScale)component;
                    var val = new GenericScale.Interop();

                    val.value = orig.value;

                    updater.UpdateComponent(entity, componentType, val, 12, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 18:
                {
                    var orig = (_0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432)component;
                    var val = new _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.Interop();

                    val.Forward_32_Input = orig.Forward_32_Input;
                    val.Horizontal_32_Input = orig.Horizontal_32_Input;
                    val.Int_32_Value = orig.Int_32_Value;
                    val.Yaw_32_Input = orig.Yaw_32_Input;
                    val.Float_32_Value = orig.Float_32_Value;
                    val.Bool_32_Value = orig.Bool_32_Value ? (System.Byte)1 : (System.Byte)0;
                    val.Force = orig.Force;
                    val.Leg = orig.Leg;
                    val.Item_32_ID = orig.Item_32_ID;
                    val.Moving = orig.Moving ? (System.Byte)1 : (System.Byte)0;
                    val.Item_32_Use = orig.Item_32_Use ? (System.Byte)1 : (System.Byte)0;
                    val.Speed_32_Multiplier = orig.Speed_32_Multiplier;

                    updater.UpdateComponent(entity, componentType, val, 39, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 19:
                {
                    var orig = (_424d353102968b249b9d7b0f844f8d7d_549442185799218217)component;
                    var val = new _424d353102968b249b9d7b0f844f8d7d_549442185799218217.Interop();

                    val.Speed = orig.Speed;
                    val.Dead = orig.Dead ? (System.Byte)1 : (System.Byte)0;
                    val.Float_32_Value = orig.Float_32_Value;

                    updater.UpdateComponent(entity, componentType, val, 9, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 20:
                {
                    var orig = (_7128f27b1ed1baf489c8389ed5d6fc89_6470917955799697127)component;
                    var val = new _7128f27b1ed1baf489c8389ed5d6fc89_6470917955799697127.Interop();

                    val.Speed = orig.Speed;
                    val.Dead = orig.Dead ? (System.Byte)1 : (System.Byte)0;
                    val.Float_32_Value = orig.Float_32_Value;

                    updater.UpdateComponent(entity, componentType, val, 9, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 21:
                {
                    var orig = (_914d344279c379f419cf479a1753d20a_2829627674445409302)component;
                    var val = new _914d344279c379f419cf479a1753d20a_2829627674445409302.Interop();

                    val.Forward_32_Input = orig.Forward_32_Input;
                    val.Horizontal_32_Input = orig.Horizontal_32_Input;
                    val.Yaw_32_Input = orig.Yaw_32_Input;
                    val.Float_32_Value = orig.Float_32_Value;
                    val.Int_32_Value = orig.Int_32_Value;
                    val.Bool_32_Value = orig.Bool_32_Value ? (System.Byte)1 : (System.Byte)0;
                    val.Force = orig.Force;
                    val.Leg = orig.Leg;
                    val.Item_32_ID = orig.Item_32_ID;
                    val.Moving = orig.Moving ? (System.Byte)1 : (System.Byte)0;
                    val.Item_32_Use = orig.Item_32_Use ? (System.Byte)1 : (System.Byte)0;
                    val.Speed_32_Multiplier = orig.Speed_32_Multiplier;

                    updater.UpdateComponent(entity, componentType, val, 39, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 22:
                {
                    var orig = (_bb0f0a9322c5911438bb794513b1730c_7055187111608814719)component;
                    var val = new _bb0f0a9322c5911438bb794513b1730c_7055187111608814719.Interop();

                    val.Forward_32_Input = orig.Forward_32_Input;
                    val.Horizontal_32_Input = orig.Horizontal_32_Input;
                    val.Yaw_32_Input = orig.Yaw_32_Input;
                    val.Int_32_Value = orig.Int_32_Value;
                    val.Float_32_Value = orig.Float_32_Value;
                    val.Bool_32_Value = orig.Bool_32_Value ? (System.Byte)1 : (System.Byte)0;
                    val.Force = orig.Force;
                    val.Leg = orig.Leg;
                    val.Item_32_ID = orig.Item_32_ID;
                    val.Moving = orig.Moving ? (System.Byte)1 : (System.Byte)0;
                    val.Item_32_Use = orig.Item_32_Use ? (System.Byte)1 : (System.Byte)0;
                    val.Speed_32_Multiplier = orig.Speed_32_Multiplier;

                    updater.UpdateComponent(entity, componentType, val, 39, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 23:
                {
                    var orig = (_cc21e0b721af6554cb6d76410a471081_1249811188870620346)component;
                    var val = new _cc21e0b721af6554cb6d76410a471081_1249811188870620346.Interop();

                    val.Forward_32_Input = orig.Forward_32_Input;
                    val.Horizontal_32_Input = orig.Horizontal_32_Input;
                    val.Yaw_32_Input = orig.Yaw_32_Input;
                    val.Int_32_Value = orig.Int_32_Value;
                    val.Float_32_Value = orig.Float_32_Value;
                    val.Bool_32_Value = orig.Bool_32_Value ? (System.Byte)1 : (System.Byte)0;
                    val.Force = orig.Force;
                    val.Leg = orig.Leg;
                    val.Item_32_ID = orig.Item_32_ID;
                    val.Moving = orig.Moving ? (System.Byte)1 : (System.Byte)0;
                    val.Item_32_Use = orig.Item_32_Use ? (System.Byte)1 : (System.Byte)0;
                    val.Speed_32_Multiplier = orig.Speed_32_Multiplier;

                    updater.UpdateComponent(entity, componentType, val, 39, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
                case 24:
                {
                    var orig = (_ea0ce77a37858c0439454347131e0952_7211456737231016444)component;
                    var val = new _ea0ce77a37858c0439454347131e0952_7211456737231016444.Interop();

                    val.Speed = orig.Speed;
                    val.Dead = orig.Dead ? (System.Byte)1 : (System.Byte)0;
                    val.Float_32_Value = orig.Float_32_Value;

                    updater.UpdateComponent(entity, componentType, val, 9, component.FieldsMask, component.StoppedMask, frames);

                    return;
                }
            }

            throw new NotImplementedException($"Failed to update a component with type {componentType}.");
        }

        public unsafe IEntityCommand GetCommand(UInt32 type, IntPtr data, Int32 dataSize)
        {
            switch (type)
            {
                  case 0: return AuthorityRequest.FromInterop(data, dataSize);
                  case 1: return AuthorityTransfer.FromInterop(data, dataSize);
                  case 2: return QuerySynced.FromInterop(data, dataSize);
                  case 3: return AdoptOrphan.FromInterop(data, dataSize);
                  case 4: return PersistenceReady.FromInterop(data, dataSize);
                  case 5: return SceneIndexChanged.FromInterop(data, dataSize);
            }

            throw new ArgumentException($"Unkown command type {type}", nameof(type));
        }

        public unsafe IEntityInput GetInput(UInt32 type, IntPtr data, Int32 dataSize)
        {
            throw new ArgumentException($"Unknown input type {type}", nameof(type));
        }

        public unsafe bool SendCommand(INativeCoreCommandSender sender, InteropEntity entity, MessageTarget target, IEntityCommand command)
        {
            var type = command.GetComponentType();
            switch (type)
            {
                case 0:
                {
                    var orig = (AuthorityRequest)command;
                    var val = new AuthorityRequest.Interop();

                    val.requester = orig.requester;
                    val.authorityType = orig.authorityType;

                    return sender.SendCommand(entity, target, type, val, 8);

                }
                case 1:
                {
                    var orig = (AuthorityTransfer)command;
                    var val = new AuthorityTransfer.Interop();

                    val.newAuthority = orig.newAuthority;
                    val.accepted = orig.accepted ? (System.Byte)1 : (System.Byte)0;
                    val.authorityType = orig.authorityType;

                    return sender.SendCommand(entity, target, type, val, 9);

                }
                case 2:
                {
                    var orig = (QuerySynced)command;
                    var val = new QuerySynced.Interop();

                    val.liveQuerySynced = orig.liveQuerySynced ? (System.Byte)1 : (System.Byte)0;
                    val.globalQuerySynced = orig.globalQuerySynced ? (System.Byte)1 : (System.Byte)0;

                    return sender.SendCommand(entity, target, type, val, 2);

                }
                case 3:
                {
                    var orig = (AdoptOrphan)command;
                    var val = new AdoptOrphan.Interop();


                    return sender.SendCommand(entity, target, type, val, 0);

                }
                case 4:
                {
                    var orig = (PersistenceReady)command;
                    var val = new PersistenceReady.Interop();


                    return sender.SendCommand(entity, target, type, val, 0);

                }
                case 5:
                {
                    var orig = (SceneIndexChanged)command;
                    var val = new SceneIndexChanged.Interop();

                    val.sceneIndex = orig.sceneIndex;

                    return sender.SendCommand(entity, target, type, val, 4);

                }
            }

            throw new NotImplementedException($"Failed to send a command with type {type}.");
        }

        public unsafe void SendInput(INativeCoreInputSender sender, InteropEntity entity, long frame, IEntityInput input)
        {
            var type = input.GetComponentType();

            throw new NotImplementedException($"Failed to send an input with type {type}.");
        }
    }

}
