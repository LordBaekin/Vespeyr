// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Runtime.InteropServices;
    using System.Collections.Generic;
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.SimulationFrame;
    using Coherence.Entities;
    using Coherence.Utils;
    using Coherence.Brook;
    using Coherence.Core;
    using Logger = Coherence.Log.Logger;
    using UnityEngine;
    using Coherence.Toolkit;
    public struct _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432 : ICoherenceComponentData
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public System.Single Forward_32_Input;
            [FieldOffset(4)]
            public System.Single Horizontal_32_Input;
            [FieldOffset(8)]
            public System.Int32 Int_32_Value;
            [FieldOffset(12)]
            public System.Single Yaw_32_Input;
            [FieldOffset(16)]
            public System.Single Float_32_Value;
            [FieldOffset(20)]
            public System.Byte Bool_32_Value;
            [FieldOffset(21)]
            public System.Single Force;
            [FieldOffset(25)]
            public System.Single Leg;
            [FieldOffset(29)]
            public System.Int32 Item_32_ID;
            [FieldOffset(33)]
            public System.Byte Moving;
            [FieldOffset(34)]
            public System.Byte Item_32_Use;
            [FieldOffset(35)]
            public System.Single Speed_32_Multiplier;
        }

        public void ResetFrame(AbsoluteSimulationFrame frame)
        {
            FieldsMask |= _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.Forward_32_InputMask;
            Forward_32_InputSimulationFrame = frame;
            FieldsMask |= _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.Horizontal_32_InputMask;
            Horizontal_32_InputSimulationFrame = frame;
            FieldsMask |= _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.Int_32_ValueMask;
            Int_32_ValueSimulationFrame = frame;
            FieldsMask |= _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.Yaw_32_InputMask;
            Yaw_32_InputSimulationFrame = frame;
            FieldsMask |= _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.Float_32_ValueMask;
            Float_32_ValueSimulationFrame = frame;
            FieldsMask |= _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.Bool_32_ValueMask;
            Bool_32_ValueSimulationFrame = frame;
            FieldsMask |= _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.ForceMask;
            ForceSimulationFrame = frame;
            FieldsMask |= _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.LegMask;
            LegSimulationFrame = frame;
            FieldsMask |= _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.Item_32_IDMask;
            Item_32_IDSimulationFrame = frame;
            FieldsMask |= _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.MovingMask;
            MovingSimulationFrame = frame;
            FieldsMask |= _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.Item_32_UseMask;
            Item_32_UseSimulationFrame = frame;
            FieldsMask |= _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.Speed_32_MultiplierMask;
            Speed_32_MultiplierSimulationFrame = frame;
        }

        public static unsafe _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432 FromInterop(IntPtr data, Int32 dataSize, InteropAbsoluteSimulationFrame* simFrames, Int32 simFramesCount)
        {
            if (dataSize != 39) {
                throw new Exception($"Given data size is not equal to the struct size. ({dataSize} != 39) " +
                    "for component with ID 18");
            }

            if (simFramesCount != 0) {
                throw new Exception($"Given simFrames size is not equal to the expected length. ({simFramesCount} != 0) " +
                    "for component with ID 18");
            }

            var orig = new _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432();

            var comp = (Interop*)data;

            orig.Forward_32_Input = comp->Forward_32_Input;
            orig.Horizontal_32_Input = comp->Horizontal_32_Input;
            orig.Int_32_Value = comp->Int_32_Value;
            orig.Yaw_32_Input = comp->Yaw_32_Input;
            orig.Float_32_Value = comp->Float_32_Value;
            orig.Bool_32_Value = comp->Bool_32_Value != 0;
            orig.Force = comp->Force;
            orig.Leg = comp->Leg;
            orig.Item_32_ID = comp->Item_32_ID;
            orig.Moving = comp->Moving != 0;
            orig.Item_32_Use = comp->Item_32_Use != 0;
            orig.Speed_32_Multiplier = comp->Speed_32_Multiplier;

            return orig;
        }


        public static uint Forward_32_InputMask => 0b00000000000000000000000000000001;
        public AbsoluteSimulationFrame Forward_32_InputSimulationFrame;
        public System.Single Forward_32_Input;
        public static uint Horizontal_32_InputMask => 0b00000000000000000000000000000010;
        public AbsoluteSimulationFrame Horizontal_32_InputSimulationFrame;
        public System.Single Horizontal_32_Input;
        public static uint Int_32_ValueMask => 0b00000000000000000000000000000100;
        public AbsoluteSimulationFrame Int_32_ValueSimulationFrame;
        public System.Int32 Int_32_Value;
        public static uint Yaw_32_InputMask => 0b00000000000000000000000000001000;
        public AbsoluteSimulationFrame Yaw_32_InputSimulationFrame;
        public System.Single Yaw_32_Input;
        public static uint Float_32_ValueMask => 0b00000000000000000000000000010000;
        public AbsoluteSimulationFrame Float_32_ValueSimulationFrame;
        public System.Single Float_32_Value;
        public static uint Bool_32_ValueMask => 0b00000000000000000000000000100000;
        public AbsoluteSimulationFrame Bool_32_ValueSimulationFrame;
        public System.Boolean Bool_32_Value;
        public static uint ForceMask => 0b00000000000000000000000001000000;
        public AbsoluteSimulationFrame ForceSimulationFrame;
        public System.Single Force;
        public static uint LegMask => 0b00000000000000000000000010000000;
        public AbsoluteSimulationFrame LegSimulationFrame;
        public System.Single Leg;
        public static uint Item_32_IDMask => 0b00000000000000000000000100000000;
        public AbsoluteSimulationFrame Item_32_IDSimulationFrame;
        public System.Int32 Item_32_ID;
        public static uint MovingMask => 0b00000000000000000000001000000000;
        public AbsoluteSimulationFrame MovingSimulationFrame;
        public System.Boolean Moving;
        public static uint Item_32_UseMask => 0b00000000000000000000010000000000;
        public AbsoluteSimulationFrame Item_32_UseSimulationFrame;
        public System.Boolean Item_32_Use;
        public static uint Speed_32_MultiplierMask => 0b00000000000000000000100000000000;
        public AbsoluteSimulationFrame Speed_32_MultiplierSimulationFrame;
        public System.Single Speed_32_Multiplier;

        public uint FieldsMask { get; set; }
        public uint StoppedMask { get; set; }
        public uint GetComponentType() => 18;
        public int PriorityLevel() => 100;
        public const int order = 0;
        public uint InitialFieldsMask() => 0b00000000000000000000111111111111;
        public bool HasFields() => true;
        public bool HasRefFields() => false;


        public long[] GetSimulationFrames() {
            return null;
        }

        public int GetFieldCount() => 12;


        
        public HashSet<Entity> GetEntityRefs()
        {
            return default;
        }

        public uint ReplaceReferences(Entity fromEntity, Entity toEntity)
        {
            return 0;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public IEntityMapper.Error MapToRelative(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public ICoherenceComponentData Clone() => this;
        public int GetComponentOrder() => order;
        public bool IsSendOrdered() => false;

        private static readonly System.Int32 _Int_32_Value_Min = -2147483648;
        private static readonly System.Int32 _Int_32_Value_Max = 2147483647;
        private static readonly System.Int32 _Item_32_ID_Min = -2147483648;
        private static readonly System.Int32 _Item_32_ID_Max = 2147483647;

        public AbsoluteSimulationFrame? GetMinSimulationFrame()
        {
            AbsoluteSimulationFrame? min = null;


            return min;
        }

        public ICoherenceComponentData MergeWith(ICoherenceComponentData data)
        {
            var other = (_0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432)data;
            var otherMask = other.FieldsMask;

            FieldsMask |= otherMask;
            StoppedMask &= ~(otherMask);

            if ((otherMask & 0x01) != 0)
            {
                this.Forward_32_InputSimulationFrame = other.Forward_32_InputSimulationFrame;
                this.Forward_32_Input = other.Forward_32_Input;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.Horizontal_32_InputSimulationFrame = other.Horizontal_32_InputSimulationFrame;
                this.Horizontal_32_Input = other.Horizontal_32_Input;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.Int_32_ValueSimulationFrame = other.Int_32_ValueSimulationFrame;
                this.Int_32_Value = other.Int_32_Value;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.Yaw_32_InputSimulationFrame = other.Yaw_32_InputSimulationFrame;
                this.Yaw_32_Input = other.Yaw_32_Input;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.Float_32_ValueSimulationFrame = other.Float_32_ValueSimulationFrame;
                this.Float_32_Value = other.Float_32_Value;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.Bool_32_ValueSimulationFrame = other.Bool_32_ValueSimulationFrame;
                this.Bool_32_Value = other.Bool_32_Value;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.ForceSimulationFrame = other.ForceSimulationFrame;
                this.Force = other.Force;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.LegSimulationFrame = other.LegSimulationFrame;
                this.Leg = other.Leg;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.Item_32_IDSimulationFrame = other.Item_32_IDSimulationFrame;
                this.Item_32_ID = other.Item_32_ID;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.MovingSimulationFrame = other.MovingSimulationFrame;
                this.Moving = other.Moving;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.Item_32_UseSimulationFrame = other.Item_32_UseSimulationFrame;
                this.Item_32_Use = other.Item_32_Use;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.Speed_32_MultiplierSimulationFrame = other.Speed_32_MultiplierSimulationFrame;
                this.Speed_32_Multiplier = other.Speed_32_Multiplier;
            }

            otherMask >>= 1;
            StoppedMask |= other.StoppedMask;

            return this;
        }

        public uint DiffWith(ICoherenceComponentData data)
        {
            throw new System.NotSupportedException($"{nameof(DiffWith)} is not supported in Unity");
        }

        public static uint Serialize(_0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432 data, bool isRefSimFrameValid, AbsoluteSimulationFrame referenceSimulationFrame, IOutProtocolBitStream bitStream, Logger logger)
        {
            if (bitStream.WriteMask(data.StoppedMask != 0))
            {
                bitStream.WriteMaskBits(data.StoppedMask, 12);
            }

            var mask = data.FieldsMask;

            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.Forward_32_Input;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.Horizontal_32_Input;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {

                Coherence.Utils.Bounds.Check(data.Int_32_Value, _Int_32_Value_Min, _Int_32_Value_Max, "_0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.Int_32_Value", logger);

                data.Int_32_Value = Coherence.Utils.Bounds.Clamp(data.Int_32_Value, _Int_32_Value_Min, _Int_32_Value_Max);

                var fieldValue = data.Int_32_Value;



                bitStream.WriteIntegerRange(fieldValue, 32, -2147483648);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.Yaw_32_Input;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.Float_32_Value;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.Bool_32_Value;



                bitStream.WriteBool(fieldValue);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.Force;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.Leg;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {

                Coherence.Utils.Bounds.Check(data.Item_32_ID, _Item_32_ID_Min, _Item_32_ID_Max, "_0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.Item_32_ID", logger);

                data.Item_32_ID = Coherence.Utils.Bounds.Clamp(data.Item_32_ID, _Item_32_ID_Min, _Item_32_ID_Max);

                var fieldValue = data.Item_32_ID;



                bitStream.WriteIntegerRange(fieldValue, 32, -2147483648);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.Moving;



                bitStream.WriteBool(fieldValue);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.Item_32_Use;



                bitStream.WriteBool(fieldValue);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.Speed_32_Multiplier;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;

            return mask;
        }

        public static _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432 Deserialize(AbsoluteSimulationFrame referenceSimulationFrame, InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(12);
            }

            var val = new _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432();
            if (bitStream.ReadMask())
            {

                val.Forward_32_Input = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.Forward_32_InputMask;
            }
            if (bitStream.ReadMask())
            {

                val.Horizontal_32_Input = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.Horizontal_32_InputMask;
            }
            if (bitStream.ReadMask())
            {

                val.Int_32_Value = bitStream.ReadIntegerRange(32, -2147483648);
                val.FieldsMask |= _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.Int_32_ValueMask;
            }
            if (bitStream.ReadMask())
            {

                val.Yaw_32_Input = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.Yaw_32_InputMask;
            }
            if (bitStream.ReadMask())
            {

                val.Float_32_Value = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.Float_32_ValueMask;
            }
            if (bitStream.ReadMask())
            {

                val.Bool_32_Value = bitStream.ReadBool();
                val.FieldsMask |= _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.Bool_32_ValueMask;
            }
            if (bitStream.ReadMask())
            {

                val.Force = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.ForceMask;
            }
            if (bitStream.ReadMask())
            {

                val.Leg = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.LegMask;
            }
            if (bitStream.ReadMask())
            {

                val.Item_32_ID = bitStream.ReadIntegerRange(32, -2147483648);
                val.FieldsMask |= _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.Item_32_IDMask;
            }
            if (bitStream.ReadMask())
            {

                val.Moving = bitStream.ReadBool();
                val.FieldsMask |= _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.MovingMask;
            }
            if (bitStream.ReadMask())
            {

                val.Item_32_Use = bitStream.ReadBool();
                val.FieldsMask |= _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.Item_32_UseMask;
            }
            if (bitStream.ReadMask())
            {

                val.Speed_32_Multiplier = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432.Speed_32_MultiplierMask;
            }

            val.StoppedMask = stoppedMask;

            return val;
        }


        public override string ToString()
        {
            return $"_0aa3dc2dd97e8ac48a8f1a5d99bf2cc3_7418888528324317432(" +
                $" Forward_32_Input: { this.Forward_32_Input }" +
                $" Horizontal_32_Input: { this.Horizontal_32_Input }" +
                $" Int_32_Value: { this.Int_32_Value }" +
                $" Yaw_32_Input: { this.Yaw_32_Input }" +
                $" Float_32_Value: { this.Float_32_Value }" +
                $" Bool_32_Value: { this.Bool_32_Value }" +
                $" Force: { this.Force }" +
                $" Leg: { this.Leg }" +
                $" Item_32_ID: { this.Item_32_ID }" +
                $" Moving: { this.Moving }" +
                $" Item_32_Use: { this.Item_32_Use }" +
                $" Speed_32_Multiplier: { this.Speed_32_Multiplier }" +
                $" Mask: { System.Convert.ToString(FieldsMask, 2).PadLeft(12, '0') }, " +
                $"Stopped: { System.Convert.ToString(StoppedMask, 2).PadLeft(12, '0') })";
        }
    }

}
